<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- SQL Mapper XML 파일: DB 연동에 필요한 SQL 명령어들이 저장된다  -->
<mapper namespace="Member">
  <!-- Use type aliases to avoid typing the full classname every time. -->
  <resultMap id="MemberResult" type="Member">
    <result property="mb_id" column="mb_id"/>
    <result property="mb_nickName" column="mb_nickName"/>
    <result property="mb_pw" column="mb_pw"/>
    <result property="mb_name" column="mb_name"/>
    <result property="mb_imgSrc" column="mb_imgSrc"/>
    <result property="mb_sex" column="mb_sex"/>
    <result property="mb_phone" column="mb_phone"/>
    <result property="mb_birthDate" column="mb_birthDate"/>
    <result property="mb_email" column="mb_email"/>
    <result property="mb_postCode" column="mb_postCode"/>
    <result property="mb_addr1" column="mb_addr1"/>
    <result property="mb_addr2" column="mb_addr2"/>
    <result property="mb_remark" column="mb_remark"/>
    <result property="mb_authority" column="mb_authority"/>
    <result property="mb_status" column="mb_status"/>
    <result property="mb_regDate" column="mb_regDate"/>
    <result property="mb_wdDate" column="mb_wdDate"/>
  </resultMap>
  
  <!-- 아이디 찾기 -->
  <select id="HSgetMemberIdCheck" parameterType="Member" resultType="java.lang.String">
	 select mb_id from member where mb_nickName = #{mb_nickName} and mb_name = #{mb_name} and mb_email = #{mb_email}
  </select>  
  
  <!-- 비밀번호 찾기 -->
  <select id="HSgetMemberPwCheck" parameterType="Member" resultType="java.lang.String">
	 select mb_pw from member where mb_id = #{mb_id} and mb_nickName = #{mb_nickName} and mb_name = #{mb_name} and mb_email = #{mb_email}
  </select>  
  
  <!-- 회원 가입 저장 -->
  <insert id="HSmemberInsert" parameterType="Member">
	 insert into member values (#{mb_id}, #{mb_nickName}, #{mb_pw}, #{mb_name}, #{mb_imgSrc}, #{mb_sex}, #{mb_phone},
	 #{mb_birthDate}, #{mb_email}, #{mb_postCode}, #{mb_addr1}, #{mb_addr2}, NULL, '1', '1', sysdate, NULL) 
  </insert>

  <!-- 중복된 아이디,비밀번호  체크(함수 이용) -->
  <select id="idchk" parameterType="Member" resultType="int">
  	 select  f_idchk (#{mb_id}, #{mb_pw}) from dual 
  	 <!-- select count(*) from member where mb_id = #{mb_id} and mb_pw = #{mb_pw} --> 
  </select>	 

  <!-- 개인정보 변경  -->
  <update id="HSmemberUpdate" parameterType="Member">
	 update member set mb_nickname=#{mb_nickName}, mb_pw=#{mb_pw}, mb_name=#{mb_name}, mb_imgSrc=#{mb_imgSrc}, 
	    mb_sex=#{mb_sex}, mb_phone=#{mb_phone}, <if test="mb_birthDate!=null">mb_birthDate=#{mb_birthDate},</if> 
	    mb_email=#{mb_email}, mb_postCode=#{mb_postCode}, mb_addr1=#{mb_addr1}, mb_addr2=#{mb_addr2} 
	    where mb_id=#{mb_id}
  </update>

  <!-- 회원 탈퇴  -->
  <update id="HSmemberUpdate2" parameterType="Member">
	 update member set mb_status = '2', mb_wddate = sysdate
	    where mb_id=#{mb_id}
  </update>

  <!-- 회원정보 수정(관리자만)  -->
  <update id="HSmemberUpdate3" parameterType="Member">
	 update member set mb_nickname=#{mb_nickName}, mb_pw=#{mb_pw}, mb_name=#{mb_name}, mb_imgSrc=#{mb_imgSrc}, 
	    mb_sex=#{mb_sex}, mb_phone=#{mb_phone}, <if test="mb_birthDate!=null">mb_birthDate=#{mb_birthDate},</if> 
	    mb_email=#{mb_email}, mb_postCode=#{mb_postCode}, mb_addr1=#{mb_addr1}, mb_addr2=#{mb_addr2}, 	    
	    <if test="mb_regDate!=null">mb_regDate=#{mb_regDate},</if>
	    <if test="mb_wdDate!=null">mb_wdDate=#{mb_wdDate},</if>	    
		mb_authority=#{mb_authority}, mb_status=#{mb_status} 	    
	    where mb_id=#{mb_id}
  </update>

  <!-- 회원정보 삭제(관리자만)  -->
  <delete id="HSmemberDelete" parameterType="Member">
  	  	delete from member where mb_id = #{mb_id}
  </delete>  

  <!-- 회원목록(관리자만)  -->
  <select id="HSlistAll" parameterType="Member" resultMap="MemberResult">
      <!-- 
      select * from (select rownum rn, a.* from (select * from member
    	 order by mb_nickname) a) where rn between #{start} and #{end}
      -->	    
	  select   mb_id, mb_nickname, mb_pw, mb_name, mb_imgsrc, decode(mb_sex,'1','남성','2','여성','9','비공개') mb_sex, 
		       mb_phone, to_char(mb_birthdate,'yyyy-mm-dd') mb_birthdate,  mb_email, mb_postcode, mb_addr1, mb_addr2, mb_remark, 
		       decode(mb_authority,'1','회원','2','관리자') mb_authority, decode(mb_status,'1','Active','2','Inactive') mb_status, 
		       mb_regdate, mb_wddate from (select rownum rn, a.* from (select * from member order by mb_nickname) a) 
		       where rn between #{start} and #{end}    	 
  </select>

  <!-- 회원목록에서 총 회원수(관리자만)  -->
  <select id="total" resultType="int">
  	select count(*) from member
  </select>

  <!-- 회원목록에서 회원정보(관리자만)  -->
  <select id="HSmemberDetail" parameterType="java.lang.String" resultType="Member">
   	 select * from member where mb_id = #{mb_id}
  </select>

  <!-- 회원가입과 개인정보 변경에서 중복된 닉네임 체크  -->
  <select id="HSmemberDetail2" parameterType="java.lang.String" resultType="Member">
   	 select * from member where mb_nickName = #{mb_nickName}
  </select>  

  <!-- 회원 검색 -->
  <select id="HSmemberSearch" parameterType="Member" resultMap="MemberResult">
	 select mb_id from member where mb_nickName = #{mb_nickName}
  </select>


</mapper>